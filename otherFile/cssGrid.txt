Допустим у нас такая структура 

<div class="box">
	<div class="item">Lorem</div>
	<div class="item">Lorem, ipsum.</div>
	<div class="item">Lorem, ipsum dolor.</div>
	<div class="item">Lorem</div>
	<div class="item">Lorem, ipsum.</div>
	<div class="item">Lorem, ipsum dolor.</div>
	<div class="item">Lorem</div>
	<div class="item">Lorem, ipsum.</div>
	<div class="item">Lorem, ipsum dolor.</div>
	<div class="item">Lorem</div>
	<div class="item">Lorem, ipsum.</div>
	<div class="item">Lorem, ipsum dolor.</div>
	<div class="item">Lorem</div>
	<div class="item">Lorem, ipsum.</div>
	<div class="item">Lorem, ipsum dolor.</div>
</div>

.box {
	display: grid;
	grid-template-columns: 200px 15% 2rem auto;	
		Говорим что у родителя box будет 4 колонки, одна 200px 	вторая 15% и т.д., кол-во колонок задаешь сколько угодно, и единицы измерения тоже любые 
			auto; Автоматически растягивается на оставшееся пространство 

		auto auto auto auto; 
			Но это не значит что все 4 колонки будут равной ширины, то есть будет высчитываться в зависимости от контента внутри. Элементы займут столько сколько им необходимо по контенту внутри

		1fr fit-content(400px) 1fr;
			Функция fit-content это	максимальное значение которое может достигать эта колонка, то есть если контента мало, колонка будет занимать место по контенту, но когда контента станет много, размер не будет больше 400px

		1fr 1fr 1fr 1fr; 
			Вот теперь колонки поделятся на равные части. fr - фракция, то есть одна фракция будет равно 25%

		1fr 2fr 1fr; 
			Поделит на 3 колонки, но вторая колонка будет занимать 2 части то есть 50%

		repeat(6, 1fr); 
			Писать 6 раз 1fr долго, так что есть такая функция и она работает с любыми единицами измерения

		repeat(auto-fill, 100px); 
			То есть все элементы будут по 100px, те элементы которые не поместились перепрыгивают на новую строку. И auto-fill как бы заполняет grid макет ячейками, их не видно но они есть. И можно сделать так, допустим у нас 3 элемента, .item:last-child{grid-column-end: -1}, тогда третий элемент оттолкнется от этих двух элементов и встанет с правого края
		repeat(auto-fill, minmax(500px, 1fr)); 	

		repeat(auto-fit, 100px); 
			Делает то же самое что и auto-fill, за одним исключением, например у нас 3 элемента, и в макете grid он создаст ячейки только для этих трех элементов 

		minmax(500px, 1fr) minmax(500px, 1fr); 
			Эта функция делает диапазон минимальной и максимальной ширины, 2 колонки занимают всю ширину родителя эта максимальная ширина, и элементы не уменьшаться меньше 500px
		repeat(2, minmax(500px, 1f)); 
		repeat(auto-fit, minmax(500px, 1fr)); 
			А тут наоборот, когда хватает места чтоб два элемента встали в две колонки и занимали 500px в ширину, элементы встанут в две колонки, но когда им не будет хватать места, то элемент встанут в одну колонку и будут занимать все пространство

		subgrid; Подсетка, полезное свойство имей ввиду его и изучи, пока работает в 60% браузерах

	grid-template-rows: 30% 1fr auto;	
		Так соответственно создаем строки

	Или такая же запись этих двух свойства
	grid-template: auto auto / repeat(2, 1fr);	rows / column
}


<div class= "grid">
	<div class= "grid__item--header"></div>
	<div class= "grid__item--main"></div>
	<div class= "grid__item--aside"></div>
	<div class= "grid__item--footer"></div>
</div>

.grid {
	display: grid;
	grid-template: 1fr 5fr 2fr / 1fr 300px;
	grid-template-areas: Прописываем как бы структуру
	"header header"	header будет занимать две колонки, и одну строку
	"	main 	aside	"	main будет занимать одну колонку и одну строку, aside тоже самое
	"footer	footer"	footer будет занимать две колонки и одну строку

	Записать эту запись короче так
	grid-template:
	"header header"	1fr	
	"	main 	aside	"	5fr
	"footer	footer"	2fr
	/ 1fr 300px
}

.grid__item--header {
	grid-area: header; Прописываем имя ячейки для структуры
}
.grid__item--main {
	grid-area: main;
}
.grid__item--aide {
	grid-area: aide;
}
.grid__item--footer {
	grid-area: footer;
}

Неявная сетка

<div class="gridBox">
	<div class="gridBox__item">1</div>
	<div class="gridBox__item">2</div>
	<div class="gridBox__item">3</div>
	<div class="gridBox__item">4</div>
	<div class="gridBox__item">5</div>
	<div class="gridBox__item">6</div>
	<div class="gridBox__item">7</div>
</div>

.gridBox {
	height: 100vh;
	display: grid;
	grid-template: repeat(2, 1fr) / repeat(3, 1fr);
}
Допустим у нас 2 столбца и 3 колонки, 6 элементов поместились в нашу ЯВНУЮ сетку, но последний элемент перепрыгнул на другую строку(4-ую сроку), этот элемент уже в неявной сетке

.gridBox {
	height: 100vh;
	display: grid;
	grid-template: repeat(2, 1fr) / repeat(3, 1fr);
	grid-auto-rows: 300px/1fr;	Ну у нас явно элемент выбивается из сетки в строках, и прописываем этой строке размер
	grid-auto-columns: auto;	Значение по умолчанию 
}

.gridBox {
	height: 100vh;
	display: grid;
	grid-template: repeat(2, 1fr) / repeat(3, 1fr);

	Но если нам нужно чтоб этот неявный элемент стоял не в строке(row) а в колонке(column)
	grid-auto-flow: column; Стандартное значение row, Если грид-элементов больше, чем явно объявленных колонок или рядов, то они автоматически размещаются внутри родителя. А вот каким образом — в ряд или в колонку — можно указать при помощи свойства
	grid-auto-column: 300px;
	И элемент переместился в 4-ую колонку
}

.gridBox {
	height: 100vh;
	display: grid;
	grid-template: repeat(2, 1fr) / repeat(3, 1fr);
	grid-auto-rows: 300px;
	grid-auto-flow: dense; Так он начинает заполнять пустые пространства в grid. Этот 7-ой элемент встанет туда где раньше стоял 6 элемент когда занимал одну ячейку
}

крч это как во flex, когда экран становится определенного размера, то элементы уже не row а column
.even-columns {
 grid-auto-flow: column;
 grid-auto-columns: 1fr;
}

.gridBox__item:nth-child(6) {
	grid-column: span 2;
	6-ой элемент стал на две ячейки и после идет 7-ой элемент, и получается 6 элемент перепрыгнул на следующую строку, оставив пустое пространство в сетке
}

Перемещаем ячейки
.gridBox__item:nth-child(3) {
	grid-row-start: 2;	Наш третий элемент начинается со 2 линии по row
	grid-row-end: 3;	А заканчивается на 3 линии по row
	grid-column-start: 3;	Начинается с 3 линии по column
	grid-column-end: 4;	Заканчивается на 4 линии по column
	В итоге наш 3-ий элемент встал на последней ячейки

	grid-column-start: 2;
	grid-column-end: 4;
	Элемент вообще занял две ячейки, и вытолкнул следующий элемент из явной сетки

	Короткая запись
	grid-row: 2 / 3;
	grid-column: 2 / 4;

	Так же можно перемещать элементы как в flex-box с помощью order
}

Так же можем задать имена этим линиям
.gridBox {
	height: 100vh;
	display: grid;
	grid-template:
	[row1] 1fr [row2] 1fr [row3]	/
	[col1] 1fr [col2] 1fr [col3] 1fr [col4];
}

Выравнивание элементов
.gridBox {
	display: grid;
	grid-template: repeat(2, 1fr) / repeat(3, 1fr);

	justify-items: stretch;	Значение по умолчанию, то есть они растягиваются на все пространство отведенное им 
                 start; Теперь контент внутри ячейки встал вначале по вертикале, и размер занимает по контенту
								 end;
								 center;
	align-items: stretch;	Значение по умолчанию, и значения все те же самые но по горизонтали
}

.gridBox__item:nth-child(3) {
	justify-self: stretch;
	align-self: stretch;
	Так чисто 3 элемент стал растягиваться на все пространство в ячейке
}

Отступы между ячейками
.gridBox {
	display: grid;
	grid-template: repeat(2, 1fr) / repeat(3, 1fr);

	column-gap: 10px;	Отступ между колонками
	row-gap: 5px;	Отступ между строками
	Или
	gap: 10px 5px;
	Или
	gap: 10px; Тогда отступы по 10px 
}
