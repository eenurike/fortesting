Допустим у нас такая структура 

<div class="box">
	<div class="item">Lorem</div>
	<div class="item">Lorem, ipsum.</div>
	<div class="item">Lorem, ipsum dolor.</div>
	<div class="item">Lorem</div>
	<div class="item">Lorem, ipsum.</div>
	<div class="item">Lorem, ipsum dolor.</div>
	<div class="item">Lorem</div>
	<div class="item">Lorem, ipsum.</div>
	<div class="item">Lorem, ipsum dolor.</div>
	<div class="item">Lorem</div>
	<div class="item">Lorem, ipsum.</div>
	<div class="item">Lorem, ipsum dolor.</div>
	<div class="item">Lorem</div>
	<div class="item">Lorem, ipsum.</div>
	<div class="item">Lorem, ipsum dolor.</div>
</div>

.box {
	display: grid;
	grid-template-columns: 200px 15% 2rem auto;	
		Говорим что у родителя box будет 4 колонки, одна 200px 	вторая 15% и т.д., кол-во колонок задаешь сколько угодно, и единицы измерения тоже любые 
			auto; Автоматически растягивается на оставшееся пространство 

		auto auto auto auto; 
			Но это не значит что все 4 колонки будут равной ширины, то есть будет высчитываться в зависимости от контента внутри

		1fr 1fr 1fr 1fr; 
			Вот теперь колонки поделятся на равные части. fr - фракция, то есть одна фракция будет равно 25%

		1fr 2fr 1fr; 
			Поделит на 3 колонки, но вторая колонка будет занимать 2 части то есть 50%

		repeat(6, 1fr); 
			Писать 6 раз 1fr долго, так что есть такая функция и она работает с любыми единицами измерения

		repeat(auto-fill, 100px); 
			То есть все элементы будут по 100px, те элементы которые не поместились перепрыгивают на новую строку. И auto-fill как бы заполняет grid макет ячейками, их не видно но они есть. И можно сделать так, допустим у нас 3 элемента, .item:last-child{grid-column-end: -1}, тогда третий элемент оттолкнется от этих двух элементов и встанет с правого края
		repeat(auto-fill, minmax(500px, 1fr)); 	

		repeat(auto-fit, 100px); 
			Делает то же самое что и auto-fill, за одним исключением, например у нас 3 элемента, и в макете grid он создаст ячейки только для этих трех элементов 

		minmax(500px, 1fr) minmax(500px, 1fr); 
			Эта функция делает диапазон минимальной и максимальной ширины, 2 колонки занимают всю ширину родителя эта максимальная ширина, и элементы не уменьшаться меньше 500px
		repeat(2, minmax(500px, 1f)); 
		repeat(auto-fit, minmax(500px, 1fr)); 
			А тут наоборот, когда хватает места чтоб два элемента встали в две колонки и занимали 500px в ширину, элементы встанут в две колонки, но когда им не будет хватать места, то элемент встанут в одну колонку и будут занимать все пространство

		subgrid; Подсетка, полезное свойство имей ввиду его и изучи, пока работает в 60% браузерах

	grid-template-rows: 30% 1fr;

}
