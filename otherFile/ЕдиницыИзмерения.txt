Абсолютные единицы измерения - то-есть они не меняются типа px
	px используем тогда когда верстаем какие-то тонкие линии, какие-то границы и т.д. В других случаях лучше использовать другие единицы измерения, так как это адаптивный веб
Относительные единицы измерения - то есть они рассчитываются относительно чего-то 
rem и em - эти единицы измерения они зависят от font-size
	rem - рассчитывается от глобального размера шрифта
		html {
			font-size: 16px;
		}
		p {
			font-size: 1rem; то есть 16px (16 * 1)
			font-size: 1.5rem; то есть 24 (16 * 1.5)
				Или пользуйся онлайн конвертерами
		}
	em - так же зависит от font-size, но от ближайшего родителя	
		body {
			font-size: 14px;
		}
		header {
			font-size: 1em; то есть 14px
		}
		header h1 {
			font-size: 2em; то есть 28px
				Потому-что родитель у h1 это header, а у header размер шрифта 14px
		}
		А ЕСЛИ 
		body {
			font-size: 14px;
		}
		header {
			font-size: 2em; это 28px (14 * 2)
		}
		header h1 {
			font-size: 2em; это 56px (28 * 2)
		}
	Так же можно прописывать em и rem для блоков, отступов 
	.block {
		width: 12.5em;
		height: 12.5em;
		padding: 0.937em;
	}

	% - рассчитываются тоже относительно чего-то
		body {
			width: 50%;
				То есть body будет занимать половину от окна браузера
		}
		header {
			width: 50%;
				Будет уже занимать половину от body, то есть еще меньше чем от окна браузера
		}

	vw - рассчитывает размер относительно ширины viewport, область видимости экрана(например мой viewport 1450px)
		p.text {
			font-size: 1.37vw; 
				Это 20px относительно моего viewport, но смотри, если у чувака будет монитор очень широкий в 3000px, то соответственно размер шрифта будет намного больше чем 20px. В таком случае
			font-size: clamp(16px, 1.37vw, 32px);
				То есть ограничиваешь размер шрифта, 32px максимальный размер шрифта 
		}
			Так же и с margin, padding и т.д.

		.block {
			width: 100vw; Значит занимает полный экран по ширине
		}

	vh - рассчитывает размер высоты относительно области просмотра по высоте 
		body {
			height: 100vh;
				Блок растянется на все окно по высоте экрана
		}	

	vmin vmax -	Работает относительно наименьшего и наибольшего из vw и vh
		.block {
			width: 80vw; 
				Блок занимает 80% родителя, и когда ширина становится меньше высоты, тогда блок начинает уменьшаться, или когда высота становится меньше ширины тогда блок начинает уменьшаться
			width: 80vw; 
				Наоборот когда ширина становится больше высоты тогда блок начинает расти занимая 80% экрана или когда высота становится больше ширины тогда блок начинает расти	
		} 
		.text {
			font-size: 3.2vmax;	(20px * 16px / 100%);
				Когда ширина будет больше высоты, тогда будет расти шрифт, или когда высота будет больше ширины шрифт будет становиться больше
		}
		С ограничениями пока только придумал с clamp()
		.text {
			font-size: clamp(20px, 3.2vmin, 32px);
				Если ширина будет больше высоты, тогда шрифт не будет увеличиваться(по сути, третий аргумент не нужен), а когда когда ширина становится меньше высоты тогда шрифт начинает уменьшаться, но уменьшается до 20px дальше останавливается 
			font-size: clamp(16px, 3.2vmax, 32px);
				Если ширина больше высоты, тогда шрифт начинает увеличиваться, но увеличится до 32px дальше остановится
		}

max-width min-width max-height min-height
max-width Не позволяет элементу увеличиться чем заданное значение в ширину
.block {
	width: 100%;
	max-width: 800px;
}
То-есть блок в 800px, а когда экран уменьшится меньше чем 800px, тогда блок займет все 100% экрана

min-width Не позволяет элементу уменьшиться чем на заданное значение в ширину
.block {
	width: 100%;
	max-width: 800px;
	min-width: 500px;
}
То-есть блок в 800px, а когда экран уменьшится меньше чем 800px, тогда блок займет все 100% экрана, а когда экран будет меньше чем 500px, то элемент прекратит уменьшаться. То есть меньше чем 500px блок уже не станет

max-height Не позволяет элементу стать больше чем заданное значение в высоту
.block {
	width: 100%;
	max-width: 800px;
	min-width: 500px;
	max-height: 700px;
}
Блок не увеличится больше чем на 700px в высоту

min-height Не позволяет элементу уменьшиться чем на заданное значение в высоту
.block {
	width: 100%;
	max-width: 800px;
	min-width: 500px;
	height: 100vh;
	max-height: 700px;
	min-height: 300px;
}

min() max() clamp()
Эти свойства работают, если одно из значений в процентах

min()
.block {
	width: 70%;
	max-width: 400px;
	height: 300px
	 Альтернатива этим значениям будет
	width: min(70%, 400px);
	height: 300px
}	 
min ищет наименьшее значение, блок имеет ширину в 400px, но когда окно сжимается, то блок начинает уменьшаться в ширине но сохраняя пропорции в 70% от окна(родителя)

max() 
.block {
	width: 70%;
	min-width: 500px;
	height: 300px
	 Альтернатива этим значениям будет
	width: max(70%, 500px);
	height: 300px 
}
max ищет наибольшее значение, и тут наоборот блок занимает 70% от родителя, но когда сжимается экран доходит до 500px и он перестает сжиматься 

clamp()
.block {
	width: 80%;
	min-width: 400px;
	max-width: 600px;
	height: 300px;
	 Альтернатива этим значениям будет
	width: clamp(400px, 80%, 600px);
	height: 300px
}
Clamp это среднее между min и max. При 100% окне наш блок будет в 600px, а когда начнем уменьшать окно, блок тоже начнет уменьшаться но сохраняя пропорции в 80% от размера окна, потом когда он дойдет до 400px он перестанет уменьшаться 

Не забывай эти свойства работают со всем: шрифт, отступы(margin, padding), ширина, высота и т.д.
.block p {
	font-size: clamp(16px, 2vw, 2rem);
	color: white;
}
Тут обязательно нужно ставить единицу измерения vw, так как адаптивный шрифт должен отталкиваться от ширины экрана. В общем наименьший шрифт 16px и наибольший 32px(2rem - 32px), а в промежутке между этими значениями, шрифт будет увеличиваться и уменьшаться, в зависимости от экрана 


