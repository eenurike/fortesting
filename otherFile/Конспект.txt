<-- HTML -->



<a href="./index2.html" target="_black">Ссылка на другую страницу</a>
Смотри когда указываем ./ идет поиск в этой папке, target говорит чтоб открыть ссылку в новом окне


Чтоб быстро создать <link rel="stylesheet" href="./css/style.css" />, можно просто написать link:css и жмешь tab


<header>Шапка</header>
<main>Тело нашей страницы, в main находится вся главная информация сайта</main>

<footer>Низ сайта, дублирует все что было на сайте, так же лого, форма, копирайт(@)</footer>

<aside>Кол-во таких элементов не ограниченно. Aside как правило слева или справа но не всегда. Внутри тега aside располагается инфо на тематику нашего сайта, но она уже дополнительная</aside>

<nav>Навигация где находится набор ссылок, кол-во тоже не ограниченно</nav>

<section>Кол-во не ограниченно, не обходим чтоб помещать в него какой-то крупный кусок информации для которого не нашлось более точного с точки зрения семантики тега, тоже не ограниченный тег по кол-во</section>

<article>Помещаем логический обособленный тег, логические завершенные блоки для статей</article>

<q>"Цитата"</q>

<blockquote>Большая цитата</blockquote>

<picture>Сайт может открываться с разных устройств, и нам может понадобится загрузить изображение с меньшим размером</picture>
<picture>
	<source media="(max-width:1000px)" srcset="путь">	Так мы подгружаем другую увртинку, например с меньшим размером
	<img src="путь" alt="Бла"
</picture>

<figure>
	<img src="путь" alt="Бла">
	<figcaption>Описание картинки</figcaption>	Данная структура позволяет семантически связать данный текст с данным изображением
</figure>

<audio src="путь" controls>Атрибут controls добавляет стандартные для браузера кнопки управления play, stop и т.д.</audio>
<video src="путь" width="480" controls></video>
<video width="480" controls>
	<source src="bla.webm" type="video/webm">
	<source src="bla.mp4" type="video/mp4">
		Короче, если браузер не поддерживает webm, то он загрузит mp4, а type это чтоб браузер быстрее определил формат видео
	<p>УПС, БРАУЗЕР НЕ МОЖЕТ ЗАГРУЗИТЬ ВИДЕО</p>
		А если браузер не загрузить и mp4, то покажет эту фразу
</video>
<audio src="путь" controls loop>Трек будет бесконечно проигрываться</audio>
<audio src="путь" controls loop autoplay>При открытии страницы сразу воспроизводится звук, но сейчас этот атрибут не работает в браузерах ПРОВЕРЬ</audio>
<video src="путь" controls loop autoplay muted>На видео muted с autoplay видео будет воспроизводится при открытии сайта без звука</video>
<video src="путь" controls poster="путь">Добавить на превью картинку</video>
<video src="путь" controls poster="путь" preload="auto">Атрибут по дефолту, сайт открылся и видео загрузилось и готово к воспроизведению</video
<video src="путь" controls poster="путь" preload="metadata">Браузер загружает информацию о видео, но не само видео</video
<video src="путь" controls poster="путь" preload="none">Тогда ничего не загрузится, только после нажатия play, все будет загружаться</video


<a href="tel:+77471222630">+7 (747) 122-26-30</a> У нашей ссылки появится функционал, если нажать на ссылку эту, то с телефона начнется сразу звонок
<a href="mailto:eenurike@gmail.com">email</a> При клике перекинет на отправку почты, но почему-то не работает
<a href="skype:example">skype</a>

<button type="submit">button</button> Кнопка подтвердить
<button type="reset">button</button> Кнопка очистить, например форму
<button type="button" autofocus>button</button> При открытии сайта сразу указывает на эту кнопку, и ты можешь просто нажать ENTER и нажмется эта кнопка, например при открытии сайта выскакивает модальное окно с рекламой, на кнопку крестик(закрыть) вешаем этот атрибут, и при ENTER сразу окно закрывается
<button type="button" disable>button</button> кнопка становится не активной, просто серая 


Данный хранятся в табличной форме
<table>	
	<caption>	Это первая таблица</caption>	Заголовок
	<thead>	Это для семантики, шапка таблицы
		<tr>
			<th>ШАПКА</th>	table head шапка, выделяется жирным текстом 
			<th>ШАПКА</th>
		</tr>
	</thead>
	<tbody>	Table body, для семантики тело таблицы
		<tr>	table row строчка
			<td rowspan="2'>текст</td>	table data ячейка, и объединяет две ячейки
			<td>текст</td>
			<td>текст</td>
			<td>текст</td>
		</tr>
		<tr>	
			<td>текст</td>	Так как наверху объединяет две ячейки, то отсюда нужно удалить лишнюю
			<td>текст</td>
			<td>текст</td>
			<td>текст</td>
		</tr>
	</tbody>
	<tfoot> Table foot семантика низа для таблицы
		<tr>
			<td colspan="2">Футер</td> colspan он объединяет две ячейки
		</tr>
	</tfoot>
</table>

td {
	border: 1px solid black;
}


<form	action="помещается путь к скрипту который будет обрабатывать эту форму"
			method="есть три метода, это нужно при отправке на backend, но нужно почитать о них"
			name="задаем имя для формы form1, такое имя только для этой формы"
			autocomplete="off/on если один раз заполнил формы, то при следующем входе, данные сохранятся">

	<input type="text"> Создали поле. У атрибута type, есть очень много свойств, посмотри отдельно		
	<select name="select">	Выпадающее меню, чтоб данные из этого меню отправились на сервер, необходимо заполнить атрибут name, так и атрибут value
		<option value="">--Не выбрано--</option>
		<option value="one">1</option>
		<option value="two">2</option>
		<option value="three">3</option>
	</select>	
	<textarea cols="30" rows="10">	Поле для ввода большого текста, размеры лучше в стилях задать
		Далеко-далеко за словесными горами в стране гласных и согласных живут рыбные тексты.
	</textarea>	
	<button type="submit">Отправить данные</button>
</form>

<form>
	<label for="area123">Введите ваше имя</label>	Привязываем нашу кнопку к тексту
	<input id="area123" type="text">
</form>
ИЛИ
<form>
	<label>
		Введите ваше имя
		<input type="text">
	</label>
</form>

<form>
	<fieldset>	Объединить элементы
		<legend>Два инпута</legend>	Подпись нашего объединения
		<input type="text" />
		<input type="text" />
	</fieldset>
	<fieldset>
		<legend>Инпут и поле ввода</legend>
		<input type="text" />
		<select name="select">
			<option value="">--Не выбрано--</option>
			<option value="one">1</option>
			<option value="two">2</option>
		</select>
	</fieldset>
</form>

<form>
	<input type="text">	Просто поле для ввода текста
							number	Вводим только числа, либо увеличивать либо уменьшаться
							password	Вводим пароль, введенное значение заменяется ****
							tel	Если Открыли с телефона, тапаешь на это поле, то откроется именно клавиатура
							email	Валидация чтоб было именно ввели формата email@gmail.com
							search	Форма поиска по сайту
							file	Загрузка данных с компа
							url	Поле для вставки ссылки
							date	Создает поле даты
							datetime 	Позволяет выбрать и время
							datetime-local
							mouth	Выбираем год и месяц
							week	Выбираем неделю
							time	Время
							radio	Нужно несколько вариантов выбора, и через точки выбираешь
							range Шкала, которую двигать можно

	<label>
		Поставь точку
		<input type="radio" name="name1">
		<input type="radio" name="name1">
		<input type="radio" name="name1">
	</label>						
	Привязали кнопки к тексту и с помощью name сделали чтоб могли выбрать какой-то один вариант

							checkbox	Выбор именно с галочкой, тут уже можно выбрать несколько вариантов
							submit
							reset	Ну как и с button

	<input list="list">
		<datalist id="list1">
			<option value="one">1</option>				
			<option value="two">2</option>				
			<option value="three">3</option>				
		</datalist>
	Привязали кнопку с выбором варианта из выпадающего меню, но в чем отличие от <select>, в том что первому полю можем сами вписать и выбрать что угодно и отправить

	Таких input type много посмотри

	И помни что в CSS появилось свойство которое меняет цвет для кнопок accent-color
</form>


<-- CSS -->



Когда указываешь размеры картинки, если задашь и высоту и ширину, то тебе придется четко угадать пропорции картинки, а когда задашь только width или height картинки, то размер картинки поменяется пропорционально, смотря от ситуации, когда тебе надо картинку впихнуть по ширине, то задаешь только width и высота сама подгонится, или когда картинку нужно разместить по высоте, то пишешь только height, а ширина сама подгонится


inherit значение будет наследоваться от родителя 


У картинок
img {
  width: 100%;
  max-width: 500px;
}
Смотри устанавливаем ширину в 100% это будет адаптивная картинка, то есть она будет всегда уменьшаться пропорционально,
но максимальная ширина картинки 500px, то-есть если размер экрана меньше 500px то картинка принимает ширину 100%


margin-left: auto;
margin-right: auto;
Если у элемента фиксированная ширина, не инлайновый элемент, а только если у элемента есть прописанная ширина тогда элемент встанет по центру
margin: 0 auto;
Сокращенный вариант
margin-left: auto;
Тогда этот элемент оттолкнется на максимум от левого края, то есть встанет в правом краю, так же и с margin-right только отталкиваться будет от правого края


margin: 1px 3px 5px 7px;
1px - верх
3px - права
5px - низ
7px - лево
margin: 1px 3px 5px;
1px - верх
3px - лево и правого
5px - низ
margin: 1px 3px;
1px - верх и низ
3px - лево и право
margin: 5px;
Отступ со всех сторон по 5px
С padding все тоже самое


Явления схлопывание вертикальных margin, это когда например у первого блока margin-bottom: 10px, а у второго блока margin-top: 30px, логично будет подумать отступ между первым и вторым блоком будет 40px, но тут работает понятие всхлопывание margin, то есть берется самое высокое значение, то есть отступ будет margin-top: 30px. У горизонтальных margin такого явления нет, как и у padding нет


Есть и отрицательные значения, но у padding нет, ну по логике вещей, как внутренний отступ вожмется в себя


position: absolute;
Ты как бы берешь и выдераешь элемент с потока кода, и он болтается где хочет и никому мешать не буддет и он не может работать без своего брата position: relative; но если просто прописать absolute, не задавая родителю relative, то этот элемент будет позиционироваться относительно body, так как у body по дефолту прописано свойтво position: relative
position: sticky;
Это как position: fixed; но за одним исключением, fixed он как absolute выпадает из потока кода, и как бы становится поверх всех всех блоков, и ездит со скролом, а sticky он остается на своем месте не выпадая, а когда только начинаешь скролить он выпадает и становится fixed. Обязательное условие чтоб было какоето позиционирование например top: 0; и чтоб в html этот тег со свойством sticky не был единственным
<div class="sticky">bla</div>         .sticky {
<header></header>                       position: sticky;
<main></main>                           top: 0;
<footer></footer>                      }
То-есть теперь относительно header main footer наш блок sticky будет ездить


z-index: 1; 
Значение от меньшему к большему идет, меньшее значение слой самый первый самый снизу, большее значение слой выше, но лучше не делать z-index: 999; Лучше для себя прописать стандарт что от 1 до 6 слоя максимум


Псевдоэлемент ::before ::after 
Создается элемент после какого-то элемента 
.test::after {                    .test::after {   
  content: "";                      content: "";
  width: 100px;                     width: 100px;
  height: 100px;                    height: 100px;
  display: block;                   position: absolute;
  margin: и позиционируешь          top: и позиционируешь
  background-color: red;            left: и позиционируешь
}                                   background-color: red;    
Смотри чтоб элемент появился пишем либо display: block м позиционируем margin, или position: absolute и позиционируешь top,left,bottom,right, смотря от ситуации. В content: "nur" можем прописать чот-то или оставить пустой, чтоб элемент появился, можно комбинировать .test:nth-child(2)::after


#wrapper * {
	Такая запись означает что мы обращаемся ко всем элементам в блоке wrapper
}

.text p {
	Обращаемся ко всем <p> в блоке text 
}

.text p:first-child + p {
	Обращаемся в соседнему элементу от <p>, не дочернему, а просто следующему элементу
}
<div class="text">
	<p>lorem</p> 
	<p>lorem bla</p>	Обращаемся именно к этому элементу
	<p>lorem bla bla</p>
</div>

.text img ~ p {
	Обращаемся ко всем <p> после img
}
<div class="text">
	<p>lorem</p> 
	<img src="путь">
	<p>lorem bla</p>	Обращаемся только к этим элементам
	<p>lorem bla</p>	Обращаемся только к этим элементам
</div>

.list > li {
	Обратится только к своим детям li
}
<ul class="list">
	<li>1</li>	Обращаемся только к этим элементам
	<li>2</li>	Обращаемся только к этим элементам
	<ul>
		<li>3</li>
		<li>4</li>
	</ul>
</ul>

[class] {
	ищем все теги с атрибутом class
}

input[type] {
	Селектор по атрибуту
}

input[type='submit'] {
	Селектор по атрибуту
}
<input type="text"/>
<input type="submit"/>	Обращаемся только к этому тегу
<input type="number"/>

a[href*='link'] {
	Обращаемся ко всем ссылкам у кого в атребуте href присутствует слово link
}
<a href="dasdwlinkdwadwd">ТУТ</a>	Обращаемся только к этому тегу
<a href="https://google.com">ТУТ</a>
<a href="linkwdsadw">ТУТ</a>	Обращаемся только к этому тегу

a[href^='link'] {
	Обращаемся ко всем ссылкам у кого в атребуте href слово начинается на link
}
<a href="dasdwlinkdwadwd">ТУТ</a>
<a href="https://google.com">ТУТ</a>
<a href="linkwdsadw">ТУТ</a>	Обращаемся только к этому тегу

img[src$='.png'] {
	Обращаемся ко всем картинкам у кого в атребуте src слово заканчивается на .png
}
<img src="путь/.jpg"/>
<img src="путь/.png"/>
<img src="путь/.jpeg"/>



Псевдоклассы :hover :nth-child(2) :nth-of-type(1) :first-child()

overflow: hidden (auto,scroll);
Например у нас фиксированная высота блока, а контента много, и контент вываливается за пределы блока, тогда прописываем overflow, hidden вырезает не поместившийся контент по размеру блока, auto/scroll добавляет скрол в этот блок 


box-sizing: border-box/content-box; Важное свойство которое прописывается вначале и всем файлам, крч это свойство занимается тем чтоб padding и border не вываливался наружу а как бы входил внутрь блока


transform:
translate(10px, 20px) Первое значение двигает по оси X, второе значение Y
translateY(10px) верх низ
translateX(10px) лево право
Но тут же приходит вопрос можно же это сделать margin, если будем перемещать элемент с margin, то и все элементы снизу тоже переместятся
rotate(180deg) повернет елемент на сколько нужно градусов
scale(1.1/0.9) увеличить и уменьшить элемент
skew(50deg, 90deg) первое значение X, второе Y наклонять элемент
Можно записать так 
transform: translateX(10px) rotate(30deg);

Смотри появились все эти значения в виде свойств 
scale: 1.5;
rotate: 360deg;
И прикол в чем, что можно анимацию делать на каждое свойство отдельно, задержку прописывать на каждое свойство отдельно


transition: all 1s ease 0s;
Это свойство отвечает за плавность
all - это для чего именно будем происходить анимация, можно прописать отдельно для определенного свойство плавность(border-radius, transform, color и т.д.)
1s - это время на анимацию
ease - это вид анимации, разные виды анимации можно посмотреть в инcпекторе кода, там прям наглядно показывается какие анимации и как они будут анимироваться, и можно даже свою анимацию там  же сделать, двигая ползунки
0s - это задержка на анимацию
И смотри чтоб плавность правильно работала, нужно transition прописывать на сам элемент, а не элемент с псевдокласс :hover


В background-image можно записать сразу несколько картинок
background-image: url("..."),
background-image: url("...");
background-size: 80%, 700px;		80% это к первой картинке, 700px ко второй картинке


-webkit-text-stroke: 2px black; обводка буквы
-webkit-text-fill-color: white; цвет

Например нам нужно чтоб на заднем фоне была какая нибудь картинка, а на переднем фоне в центре картинки надпись, и фон у этой надписи был другим в отличии от картинки, например blur
.testBlock {
	background-image: url('https://picsum.photos/2000/500');
	max-width: 1200px;
	height: 500px;
	display: flex;
	justify-content: center;
	align-items: center;
}

.testBlock h1 {
	width: 100%;
	text-align: center;
	padding: 50px;
	backdrop-filter: blur(7px);	Фон текста будет замыленный
									 brightness(4.5);	Фон будет обесвечен
									 contrast(0.5); Контрастный
									 grayscale(5); Фон будет серый. Например картинка цветная, а фон шрифта например квадратный фон будет серый
									 hue-rotate(442deg); Фон будет цветной, например картинка наоборот черно-белай, а квадрат цветной 
									 invert(1); Инверсированный 
									 opacity(0.5); Прозрачность
									 sepia(1); Сепия
	Можно комбинировать
									 grayscale(1) contrast(3) blur(1px);								 
}


text-wrap: balance; Переносит слова в тексте красиво. 64% поддержки на can i use

accent-color: red; Меняешь цвета для радиокнопок, чекбоксов, range и т.д.

Если нужно например сохранить пропорции картинки 16/9, то можно воспользоваться свойством 
img {
	aspect-ratio: 16 / 9;
	object-fit: cover;	
	width: 400px;
	max-width: 100%;
}
aspect-ratio и object-fit будто созданы друг для друга, и при уменьшении экрана соотнощение сторон будет сохраняться

Если например большой текст и его надо обрезать чтоб появились ...
p.text {
	display: -webkit-box;
	overflow: hidden;
	-webkit-box-orient: vertical/horizontal;
	-webkit-line-clamp: 3;	Тоесть вконце 3 троки появятся точки
}
Это свойство работает только с -webkit-box
<-- VSCODE -->



CTRL D горячие клавиши в vscode, ищет такое же искаемое слово

F1 > Emmet:Перенести с сокращением...(wrap with) Обернуть какой-то блок в какой-то тег. Или воспользоваться плагинов в vscode, выделяешь так же что надо обернуть в тег > нажимаешь F1 > пишешь Wrap in HTML tags и воспользоваться горячей клавишой ALT + W

<video preload="auto">Встаешь на ковычки и нажимаешь CTRL + SPACE, покажет другие свойства атрибута</video>